spring:
  application:
    name: GaePpa
  jackson:
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 5MB
  jwt:
    secret: ${JWT_SECRET}
  profiles:
    # develop : develop 환경에서 application run 을 실행
    # production : 실 사용자가 사용하는 환경에서 application run 을 실행
    # staging : 실 사용자는 없지만, 마지막 테스트 환경에서 application run 을 실행
    active: none # <develop, production, staging, none> 옵션
    include: oauth2
  datasource:
    #    driver-class-name: org.h2.Driver
    #    url: jdbc:h2:tcp://localhost/~/GaePpa
    #    username: pu
    #    password:
    # MySQL
    #    driver-class-name: com.mysql.cj.jdbc.Driver
    #    url: ${SPRING_DATASOURCE_URL}
    #    username: ${MYSQL_USERNAME}
    #    password: ${MYSQL_PASSWORD}
    # H2
    #    driver-class-name: org.h2.Driver
    #PostgreSQL
    driver-class-name: org.postgresql.Driver
    url: ${SPRING_DATASOURCE_URL}
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
  mail:
    username: gokorea1214@naver.com
    password: ${NAVER_PASSWORD}
    host: smtp.naver.com
    port: 465
    auth-code-expiration-millis: 1800000  # 30분
    #  main:
    #    allow-bean-definition-overriding: true


  #  create	기존테이블을 삭제하고 다시 생성
  #  create-drop 기존테이블을 삭제하고 다시생성. 종료 시점에 테이블삭제
  #  update	변경된 스키마 적용 (운영 DB 에서 사용X)
  #  validate Entity 와 테이블이 정상 매핑 되었는지 확인
  #  none 기존테이블을 더 이상 건드리지 않음.
  jpa:
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        show_sql: true
        format_sql: false
        default_batch_fetch_size: 1000 #최적화 옵션

  cache:
    type: redis
    cache-names: profileImages
  data:
    redis:
      host: ${REDIS_HOST}
      port: 6379
      # 캐시 TTL 설정 (60분). 이미지 캐싱을 위한 설정
      time-to-live: 600000
  web:
    resources:
      static-locations: classpath:/static/,file:/static/

  backend:
    url: ${BACKEND_URL}
  frontend:
    url: ${FRONTEND_URL}


logging.level.org:
  hibernate:
    SQL: error
logging:
  level:
    root: INFO
    com.your.package: DEBUG

#  springframework: debug
#  org.hibernate.type: trace
#  jdbc:h2:~/pushop

spring.jpa:
  open-in-view: true
  
server:
  servlet:
    context-path: /api